name: CI-CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Optional custom image tag"
        required: false
        type: string

env:
  APP_NAME: hello-flask
  APP_PORT: 8000
  REGISTRY: docker.io
  IMAGE_NAME: docker.io/${{ secrets.DOCKER_USERNAME }}/hello-flask
  DOCKER_BUILDKIT: "1"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          python -m pip install --upgrade pip
          pip install flake8
      - run: flake8 app tests

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest coverage
      - run: |
          coverage run -m pytest -q
          coverage xml -o coverage.xml
      - uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml

  sonarcloud:
    runs-on: ubuntu-latest
    needs: [lint, tests]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: coverage
          path: .
      - uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker_build_push:
    runs-on: ubuntu-latest
    needs: [lint, tests, sonarcloud]
    outputs:
      tag: ${{ steps.image.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.event.inputs.image_tag }}
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - id: image
        run: echo "tag=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT

  terraform_apply:
    runs-on: ubuntu-latest
    needs: docker_build_push
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Terraform Init & Apply
        run: |
          terraform -chdir=./terraform init -reconfigure
          terraform -chdir=./terraform apply -auto-approve

        env:
          TF_VAR_vm_username: ${{ secrets.VM_USERNAME }}
          TF_VAR_subscription_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_tenant_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

  aks_deploy:
    runs-on: ubuntu-latest
    needs: [docker_build_push, terraform_apply]
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          rm kubectl

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ci-cd-rg \
            --name ci-cd-aks \
            --admin \
            --file kubeconfig
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig

      - name: Deploy to AKS
        env:
          IMAGE_TAG: ${{ needs.docker_build_push.outputs.tag }}
        run: |
          sed -i "s|IMAGE_PLACEHOLDER|docker.io/${{ secrets.DOCKER_USERNAME }}/hello-flask:${IMAGE_TAG}|" deployment.yml
          KUBECONFIG=${{ github.workspace }}/kubeconfig kubectl apply -f deployment.yml

      - name: Get LoadBalancer IP
        run: |
          KUBECONFIG=${{ github.workspace }}/kubeconfig
          echo "App LoadBalancer IP:"
          kubectl get svc my-app-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

  notify:
    runs-on: ubuntu-latest
    needs: [lint, tests, sonarcloud, docker_build_push, terraform_apply, aks_deploy]
    steps:
      - run: |
          echo "âœ… Workflow succeeded"
          KUBECONFIG=${{ github.workspace }}/kubeconfig
          kubectl get svc my-app-service
