name: CI-CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      target_environment:
        description: "Where to deploy"
        type: choice
        required: true
        default: "staging"
        options: ["staging", "production"]
      image_tag:
        description: "Optional custom image tag"
        required: false
        type: string

env:
  APP_NAME: hello-flask
  APP_PORT: 8000
  REGISTRY: docker.io
  IMAGE_NAME: docker.io/${{ secrets.DOCKER_USERNAME }}/hello-flask
  DOCKER_BUILDKIT: "1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          python -m pip install --upgrade pip
          pip install flake8
      - run: flake8 app tests

  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest coverage
      - run: |
          coverage run -m pytest -q
          coverage xml -o coverage.xml
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-py${{ matrix.python-version }}
          path: coverage.xml

  sonarcloud:
    runs-on: ubuntu-latest
    needs: [lint, tests]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: coverage-ubuntu-latest-py3.11
          path: .
      - uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker_build_push:
    runs-on: ubuntu-latest
    needs: [lint, tests, sonarcloud]
    if: github.event_name != 'pull_request'
    outputs:
      tag: ${{ steps.image.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ inputs.image_tag }}
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - id: image
        run: echo "tag=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT

  terraform_apply:
    runs-on: ubuntu-latest
    needs: docker_build_push
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Terraform Init
        run: terraform -chdir=./terraform init -reconfigure

      - name: Cleanup existing resource group
        run: |
          if az group show --name ci-cd-rg &>/dev/null; then
            echo "Deleting existing resource group ci-cd-rg..."
            az group delete --name ci-cd-rg --yes --no-wait
            echo "Waiting for deletion..."
            az group wait --name ci-cd-rg --deleted
          else
            echo "Resource group ci-cd-rg does not exist. Skipping delete."
          fi

      - name: Terraform Apply
        run: terraform -chdir=./terraform apply -auto-approve
        env:
          TF_VAR_subscription_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_tenant_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

  deploy_to_aks:
    runs-on: ubuntu-latest
    needs: terraform_apply
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ci-cd-rg \
            --name ci-cd-aks \
            --overwrite-existing

      - name: Deploy to AKS
        run: |
          # Use a fallback tag if Docker tag is empty
          TAG=${{ needs.docker_build_push.outputs.tag }}
          if [ -z "$TAG" ]; then
            TAG="latest"
          fi
          sed -i "s|IMAGE_PLACEHOLDER|${{ env.IMAGE_NAME }}:$TAG|" ./k8s/deployment.yml
          kubectl apply -f ./k8s/deployment.yml

  notify:
    runs-on: ubuntu-latest
    needs: [lint, tests, sonarcloud, docker_build_push, terraform_apply, deploy_to_aks]
    steps:
      - run: |
          FAILED=false
          for job in lint tests sonarcloud docker_build_push terraform_apply deploy_to_aks; do
            if [ "${{ needs[job].result }}" = "failure" ]; then
              FAILED=true
            fi
          done
          if [ "$FAILED" = "true" ]; then
            echo "‚ùå Workflow failed"
            exit 1
          else
            echo "‚úÖ Workflow succeeded"
          fi
      - run: echo "üåç App deployed to AKS successfully."
